import numpy as np

# Sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Feedforward Neural Network class
class NeuralNetwork:
    def _init_(self, input_size, hidden_size, output_size):
        # Initialize weights randomly with mean 0
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        self.weights_input_hidden = np.random.randn(input_size, hidden_size)
        self.weights_hidden_output = np.random.randn(hidden_size, output_size)
        
        self.bias_hidden = np.random.randn(hidden_size)
        self.bias_output = np.random.randn(output_size)
    
    def feedforward(self, X):
        # Feedforward pass
        self.hidden = sigmoid(np.dot(X, self.weights_input_hidden) + self.bias_hidden)
        output = sigmoid(np.dot(self.hidden, self.weights_hidden_output) + self.bias_output)
        return output
    
    def backpropagation(self, X, y, output, learning_rate):
        # Calculate the error
        output_error = y - output
        output_delta = output_error * sigmoid_derivative(output)
        
        # Calculate the hidden layer error
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden)
        
        # Update the weights and biases
        self.weights_hidden_output += self.hidden.T.dot(output_delta) * learning_rate
        self.weights_input_hidden += X.T.dot(hidden_delta) * learning_rate
        
        self.bias_output += np.sum(output_delta, axis=0) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0) * learning_rate
    
    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            # Feedforward
            output = self.feedforward(X)
            # Backpropagation
            self.backpropagation(X, y, output, learning_rate)
            
            # Print loss every 100 epochs
            if (epoch + 1) % 100 == 0:
                loss = np.mean(np.square(y - output))
                print(f"Epoch {epoch+1}/{epochs} - Loss: {loss}")

# Sample dataset: XOR problem
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])
