from itertools import permutations

def calculate_total_distance(graph, path):
    """Calculate the total distance of the given path."""
    total_distance = 0
    for i in range(len(path) - 1):
        total_distance += graph[path[i]][path[i + 1]]
    # Add the distance to return to the starting city
    total_distance += graph[path[-1]][path[0]]
    return total_distance

def tsp_brute_force(graph):
    """Solve the TSP using brute force."""
    cities = list(graph.keys())  # Get the list of cities
    shortest_path = None
    min_distance = float('inf')
    
    # Generate all permutations of cities
    for perm in permutations(cities):
        # Calculate the distance of the current permutation
        current_distance = calculate_total_distance(graph, perm)
        
        # Update shortest path if the current distance is shorter
        if current_distance < min_distance:
            min_distance = current_distance
            shortest_path = perm
    
    return shortest_path, min_distance

# Example usage:
# Define a graph as an adjacency matrix (dictionary of dictionaries)
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
from itertools import permutations

def calculate_total_distance(graph, path):
    """Calculate the total distance of the given path."""
    total_distance = 0
    for i in range(len(path) - 1):
        total_distance += graph[path[i]][path[i + 1]]
    # Add the distance to return to the starting city
    total_distance += graph[path[-1]][path[0]]
    return total_distance

def tsp_brute_force(graph):
    """Solve the TSP using brute force."""
    cities = list(graph.keys())  # Get the list of cities
    shortest_path = None
    min_distance = float('inf')
    
    # Generate all permutations of cities
    for perm in permutations(cities):
        # Calculate the distance of the current permutation
        current_distance = calculate_total_distance(graph, perm)
        
        # Update shortest path if the current distance is shorter
        if current_distance < min_distance:
            min_distance = current_distance
            shortest_path = perm
    
    return shortest_path, min_distance

# Example usage:
# Define a graph as an adjacency matrix (dictionary of dictionaries)
graph = {
    'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
