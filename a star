from queue import PriorityQueue

def a_star(graph, start, goal):
    # Priority queue to store (f_score, node) tuples
    open_set = PriorityQueue()
    open_set.put((0, start))

    # Dictionaries to store the cost from start to the current node and to store the path
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    # Heuristic function (Manhattan distance for this example)
    h = lambda node: abs(ord(node) - ord(goal))  # Example heuristic, adjust for specific cases

    # Track the path
    came_from = {}

    # f_score for the start node
    f_score = {node: float('inf') for node in graph}
    f_score[start] = h(start)

    while not open_set.empty():
        # Get the node with the lowest f_score value
        _, current = open_set.get()

        # If we reach the goal, reconstruct and return the path
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        # Explore neighbors
        for neighbor, cost in graph[current].items():
